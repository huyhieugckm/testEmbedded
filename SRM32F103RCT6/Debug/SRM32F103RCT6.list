
SRM32F103RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000067c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000860  08000860  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000860  08000860  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000860  08000860  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000860  08000860  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000860  08000860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000864  08000864  00010864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08000874  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000874  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001650  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005d8  00000000  00000000  00021685  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00021c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00021e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00000ea9  00000000  00000000  00022008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00000bef  00000000  00000000  00022eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00023aa0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000624  00000000  00000000  00023b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08000848 	.word	0x08000848

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08000848 	.word	0x08000848

08000224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	2b00      	cmp	r3, #0
 8000234:	db0b      	blt.n	800024e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	f003 021f 	and.w	r2, r3, #31
 800023c:	4906      	ldr	r1, [pc, #24]	; (8000258 <__NVIC_EnableIRQ+0x34>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	095b      	lsrs	r3, r3, #5
 8000244:	2001      	movs	r0, #1
 8000246:	fa00 f202 	lsl.w	r2, r0, r2
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000e100 	.word	0xe000e100

0800025c <TM_SystemInit>:
uint32_t num = 0;

uint8_t LED[11] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

void TM_SystemInit(void)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; /* Alternate Function I/O clock enabled */
 8000262:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <TM_SystemInit+0x9c>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a24      	ldr	r2, [pc, #144]	; (80002f8 <TM_SystemInit+0x9c>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN; /* Power interface clock enable */
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <TM_SystemInit+0x9c>)
 8000270:	69db      	ldr	r3, [r3, #28]
 8000272:	4a21      	ldr	r2, [pc, #132]	; (80002f8 <TM_SystemInit+0x9c>)
 8000274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000278:	61d3      	str	r3, [r2, #28]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 800027a:	4b20      	ldr	r3, [pc, #128]	; (80002fc <TM_SystemInit+0xa0>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	4a1a      	ldr	r2, [pc, #104]	; (80002fc <TM_SystemInit+0xa0>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6053      	str	r3, [r2, #4]
	RCC->CR |= 1<<0; /* enable HSI clock */
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <TM_SystemInit+0x9c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a17      	ldr	r2, [pc, #92]	; (80002f8 <TM_SystemInit+0x9c>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (uint32_t)(1<<1)) == 0);
 80002a2:	bf00      	nop
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <TM_SystemInit+0x9c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f003 0302 	and.w	r3, r3, #2
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0f9      	beq.n	80002a4 <TM_SystemInit+0x48>
	RCC->APB2ENR |= (uint32_t)(1<<2);/* I/O port A clock enable */
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <TM_SystemInit+0x9c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <TM_SystemInit+0x9c>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<3);/* I/O port B clock enable */
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <TM_SystemInit+0x9c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <TM_SystemInit+0x9c>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<4);/* I/O port C clock enable */
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <TM_SystemInit+0x9c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <TM_SystemInit+0x9c>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<5);/* I/O port C clock enable */
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <TM_SystemInit+0x9c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <TM_SystemInit+0x9c>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<11);/* TIM1 */
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <TM_SystemInit+0x9c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <TM_SystemInit+0x9c>)
 80002e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002ea:	6193      	str	r3, [r2, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40010000 	.word	0x40010000

08000300 <TM_GPIO_Init>:

void TM_GPIO_Init(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	GPIOC->CRL |= 3UL<<0U;/* MODE */
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <TM_GPIO_Init+0xa8>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a27      	ldr	r2, [pc, #156]	; (80003a8 <TM_GPIO_Init+0xa8>)
 800030a:	f043 0303 	orr.w	r3, r3, #3
 800030e:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~(3UL<<2U); /*CNF*/
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <TM_GPIO_Init+0xa8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a24      	ldr	r2, [pc, #144]	; (80003a8 <TM_GPIO_Init+0xa8>)
 8000316:	f023 030c 	bic.w	r3, r3, #12
 800031a:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= 3UL<<4U;/* MODE */
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <TM_GPIO_Init+0xa8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a21      	ldr	r2, [pc, #132]	; (80003a8 <TM_GPIO_Init+0xa8>)
 8000322:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000326:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~(3UL<<6U); /*CNF*/
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <TM_GPIO_Init+0xa8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <TM_GPIO_Init+0xa8>)
 800032e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000332:	6013      	str	r3, [r2, #0]

	/*PB5*/
	GPIOB->CRL |= 3UL<<20U;/* MODE */
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <TM_GPIO_Init+0xac>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <TM_GPIO_Init+0xac>)
 800033a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800033e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(3UL<<22U); /*CNF*/
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <TM_GPIO_Init+0xac>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a19      	ldr	r2, [pc, #100]	; (80003ac <TM_GPIO_Init+0xac>)
 8000346:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800034a:	6013      	str	r3, [r2, #0]

	/*PB3*/
	GPIOB->CRL |= 3UL<<12U;/* MODE */
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <TM_GPIO_Init+0xac>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a16      	ldr	r2, [pc, #88]	; (80003ac <TM_GPIO_Init+0xac>)
 8000352:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000356:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(3UL<<14U); /*CNF*/
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <TM_GPIO_Init+0xac>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <TM_GPIO_Init+0xac>)
 800035e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000362:	6013      	str	r3, [r2, #0]

	/*PD2*/
	GPIOD->CRL |= 3UL<<8U;/* MODE */
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <TM_GPIO_Init+0xb0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <TM_GPIO_Init+0xb0>)
 800036a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800036e:	6013      	str	r3, [r2, #0]
	GPIOD->CRL &= ~(3UL<<10U); /*CNF*/
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <TM_GPIO_Init+0xb0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <TM_GPIO_Init+0xb0>)
 8000376:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800037a:	6013      	str	r3, [r2, #0]


	GPIOB->CRH &= ~(3UL<<10U);
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <TM_GPIO_Init+0xac>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <TM_GPIO_Init+0xac>)
 8000382:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000386:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (2UL<<10U); /* Input mode with pull-up/ pull-down */
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <TM_GPIO_Init+0xac>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a07      	ldr	r2, [pc, #28]	; (80003ac <TM_GPIO_Init+0xac>)
 800038e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000392:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= (1UL<<10U); /* pull-up */
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <TM_GPIO_Init+0xac>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <TM_GPIO_Init+0xac>)
 800039a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800039e:	60d3      	str	r3, [r2, #12]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40011000 	.word	0x40011000
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	40011400 	.word	0x40011400

080003b4 <TM_EXTI_Init>:

void TM_EXTI_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	AFIO->EXTICR[2] |= 1UL<<8U;
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <TM_EXTI_Init+0x40>)
 80003ba:	691b      	ldr	r3, [r3, #16]
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <TM_EXTI_Init+0x40>)
 80003be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c2:	6113      	str	r3, [r2, #16]
	EXTI->IMR |= 1UL<<10U; /* Interrupt request from Line x is not masked */
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <TM_EXTI_Init+0x44>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <TM_EXTI_Init+0x44>)
 80003ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ce:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= 1UL<<10U; /* Event request from Line x is not masked */
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <TM_EXTI_Init+0x44>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <TM_EXTI_Init+0x44>)
 80003d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003da:	6053      	str	r3, [r2, #4]
	EXTI->FTSR |= 1UL<<10U; /* Falling trigger enabled (for Event and Interrupt) for input line. */
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <TM_EXTI_Init+0x44>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <TM_EXTI_Init+0x44>)
 80003e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e6:	60d3      	str	r3, [r2, #12]
	//__NVIC_SetPriority(EXTI15_10_IRQn, 0);
	__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e8:	2028      	movs	r0, #40	; 0x28
 80003ea:	f7ff ff1b 	bl	8000224 <__NVIC_EnableIRQ>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010000 	.word	0x40010000
 80003f8:	40010400 	.word	0x40010400

080003fc <TM_TIM_Init>:

void TM_TIM_Init()
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	TIM1->CR1 = 0;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <TM_TIM_Init+0x4c>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
	TIM1->DIER |= 1UL<<0U;
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <TM_TIM_Init+0x4c>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <TM_TIM_Init+0x4c>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	60d3      	str	r3, [r2, #12]
	TIM1->EGR |= 1UL<<0U;
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <TM_TIM_Init+0x4c>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <TM_TIM_Init+0x4c>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6153      	str	r3, [r2, #20]
	TIM1->ARR = 79;
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <TM_TIM_Init+0x4c>)
 8000420:	224f      	movs	r2, #79	; 0x4f
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->PSC = 599;
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <TM_TIM_Init+0x4c>)
 8000426:	f240 2257 	movw	r2, #599	; 0x257
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CNT = 0;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <TM_TIM_Init+0x4c>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
	__NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000432:	2019      	movs	r0, #25
 8000434:	f7ff fef6 	bl	8000224 <__NVIC_EnableIRQ>
	TIM1->CR1 |= 1;
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <TM_TIM_Init+0x4c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a02      	ldr	r2, [pc, #8]	; (8000448 <TM_TIM_Init+0x4c>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40012c00 	.word	0x40012c00

0800044c <HC595_Write>:

void HC595_Write(uint8_t data)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<8; i++)
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	e023      	b.n	80004a4 <HC595_Write+0x58>
	{
		if(((data<<i)&0x80) == 0x80)
 800045c:	79fa      	ldrb	r2, [r7, #7]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	fa02 f303 	lsl.w	r3, r2, r3
 8000464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000468:	2b00      	cmp	r3, #0
 800046a:	d006      	beq.n	800047a <HC595_Write+0x2e>
		{
			HC595_DATA_PORT->BSRR |= HC595_DATA_PIN; /* 1 */
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <HC595_Write+0x68>)
 800046e:	691b      	ldr	r3, [r3, #16]
 8000470:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <HC595_Write+0x68>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6113      	str	r3, [r2, #16]
 8000478:	e005      	b.n	8000486 <HC595_Write+0x3a>
		}
		else
		{
			HC595_DATA_PORT->BRR |= HC595_DATA_PIN; /* 0 */
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <HC595_Write+0x68>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <HC595_Write+0x68>)
 8000480:	f043 0320 	orr.w	r3, r3, #32
 8000484:	6153      	str	r3, [r2, #20]
		}
		HC595_CLK_PORT->BSRR |= HC595_CLK_PIN; /* 1 */
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <HC595_Write+0x68>)
 8000488:	691b      	ldr	r3, [r3, #16]
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <HC595_Write+0x68>)
 800048c:	f043 0308 	orr.w	r3, r3, #8
 8000490:	6113      	str	r3, [r2, #16]
		HC595_CLK_PORT->BRR |= HC595_CLK_PIN; /* 0 */
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <HC595_Write+0x68>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <HC595_Write+0x68>)
 8000498:	f043 0308 	orr.w	r3, r3, #8
 800049c:	6153      	str	r3, [r2, #20]
	for(int i=0; i<8; i++)
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	2b07      	cmp	r3, #7
 80004a8:	ddd8      	ble.n	800045c <HC595_Write+0x10>
	}
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40010c00 	.word	0x40010c00

080004b8 <OutLed>:

void OutLed(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	HC595_LAT_PORT->BSRR |= HC595_LAT_PIN; /* 1 */
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <OutLed+0x24>)
 80004be:	691b      	ldr	r3, [r3, #16]
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <OutLed+0x24>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6113      	str	r3, [r2, #16]
	HC595_LAT_PORT->BRR |= HC595_LAT_PIN; /* 0 */
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <OutLed+0x24>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <OutLed+0x24>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6153      	str	r3, [r2, #20]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40011400 	.word	0x40011400

080004e0 <TIM1_UP_IRQHandler>:

void TIM1_UP_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

	switch(index)
 80004e4:	4b4c      	ldr	r3, [pc, #304]	; (8000618 <TIM1_UP_IRQHandler+0x138>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d87f      	bhi.n	80005ec <TIM1_UP_IRQHandler+0x10c>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <TIM1_UP_IRQHandler+0x14>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	08000505 	.word	0x08000505
 80004f8:	08000527 	.word	0x08000527
 80004fc:	0800055b 	.word	0x0800055b
 8000500:	0800059f 	.word	0x0800059f
	{
		case 0:
			HC595_Write(LED[num/1000]);
 8000504:	4b45      	ldr	r3, [pc, #276]	; (800061c <TIM1_UP_IRQHandler+0x13c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a45      	ldr	r2, [pc, #276]	; (8000620 <TIM1_UP_IRQHandler+0x140>)
 800050a:	fba2 2303 	umull	r2, r3, r2, r3
 800050e:	099b      	lsrs	r3, r3, #6
 8000510:	4a44      	ldr	r2, [pc, #272]	; (8000624 <TIM1_UP_IRQHandler+0x144>)
 8000512:	5cd3      	ldrb	r3, [r2, r3]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff99 	bl	800044c <HC595_Write>
			HC595_Write(0x10);
 800051a:	2010      	movs	r0, #16
 800051c:	f7ff ff96 	bl	800044c <HC595_Write>
			OutLed();
 8000520:	f7ff ffca 	bl	80004b8 <OutLed>
			break;
 8000524:	e062      	b.n	80005ec <TIM1_UP_IRQHandler+0x10c>
		case 1:
			HC595_Write(LED[(num%1000)/100]);
 8000526:	4b3d      	ldr	r3, [pc, #244]	; (800061c <TIM1_UP_IRQHandler+0x13c>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b3d      	ldr	r3, [pc, #244]	; (8000620 <TIM1_UP_IRQHandler+0x140>)
 800052c:	fba3 1302 	umull	r1, r3, r3, r2
 8000530:	099b      	lsrs	r3, r3, #6
 8000532:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000536:	fb01 f303 	mul.w	r3, r1, r3
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	4a3a      	ldr	r2, [pc, #232]	; (8000628 <TIM1_UP_IRQHandler+0x148>)
 800053e:	fba2 2303 	umull	r2, r3, r2, r3
 8000542:	095b      	lsrs	r3, r3, #5
 8000544:	4a37      	ldr	r2, [pc, #220]	; (8000624 <TIM1_UP_IRQHandler+0x144>)
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff7f 	bl	800044c <HC595_Write>
			HC595_Write(0x20);
 800054e:	2020      	movs	r0, #32
 8000550:	f7ff ff7c 	bl	800044c <HC595_Write>
			OutLed();
 8000554:	f7ff ffb0 	bl	80004b8 <OutLed>
			break;
 8000558:	e048      	b.n	80005ec <TIM1_UP_IRQHandler+0x10c>
		case 2:
			HC595_Write(LED[((num%1000)%100)/10]);
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <TIM1_UP_IRQHandler+0x13c>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <TIM1_UP_IRQHandler+0x140>)
 8000560:	fba3 1302 	umull	r1, r3, r3, r2
 8000564:	099b      	lsrs	r3, r3, #6
 8000566:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800056a:	fb01 f303 	mul.w	r3, r1, r3
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	4a2d      	ldr	r2, [pc, #180]	; (8000628 <TIM1_UP_IRQHandler+0x148>)
 8000572:	fba2 1203 	umull	r1, r2, r2, r3
 8000576:	0952      	lsrs	r2, r2, #5
 8000578:	2164      	movs	r1, #100	; 0x64
 800057a:	fb01 f202 	mul.w	r2, r1, r2
 800057e:	1a9a      	subs	r2, r3, r2
 8000580:	4b2a      	ldr	r3, [pc, #168]	; (800062c <TIM1_UP_IRQHandler+0x14c>)
 8000582:	fba3 2302 	umull	r2, r3, r3, r2
 8000586:	08db      	lsrs	r3, r3, #3
 8000588:	4a26      	ldr	r2, [pc, #152]	; (8000624 <TIM1_UP_IRQHandler+0x144>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff5d 	bl	800044c <HC595_Write>
			HC595_Write(0x40);
 8000592:	2040      	movs	r0, #64	; 0x40
 8000594:	f7ff ff5a 	bl	800044c <HC595_Write>
			OutLed();
 8000598:	f7ff ff8e 	bl	80004b8 <OutLed>
			break;
 800059c:	e026      	b.n	80005ec <TIM1_UP_IRQHandler+0x10c>
		case 3:
			HC595_Write(LED[((num%1000)%100)%10]);
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <TIM1_UP_IRQHandler+0x13c>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <TIM1_UP_IRQHandler+0x140>)
 80005a4:	fba3 1302 	umull	r1, r3, r3, r2
 80005a8:	099b      	lsrs	r3, r3, #6
 80005aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ae:	fb01 f303 	mul.w	r3, r1, r3
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <TIM1_UP_IRQHandler+0x148>)
 80005b6:	fba2 1203 	umull	r1, r2, r2, r3
 80005ba:	0952      	lsrs	r2, r2, #5
 80005bc:	2164      	movs	r1, #100	; 0x64
 80005be:	fb01 f202 	mul.w	r2, r1, r2
 80005c2:	1a9a      	subs	r2, r3, r2
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <TIM1_UP_IRQHandler+0x14c>)
 80005c6:	fba3 1302 	umull	r1, r3, r3, r2
 80005ca:	08d9      	lsrs	r1, r3, #3
 80005cc:	460b      	mov	r3, r1
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	1ad1      	subs	r1, r2, r3
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <TIM1_UP_IRQHandler+0x144>)
 80005d8:	5c5b      	ldrb	r3, [r3, r1]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff36 	bl	800044c <HC595_Write>
			HC595_Write(0x80);
 80005e0:	2080      	movs	r0, #128	; 0x80
 80005e2:	f7ff ff33 	bl	800044c <HC595_Write>
			OutLed();
 80005e6:	f7ff ff67 	bl	80004b8 <OutLed>
			break;
 80005ea:	bf00      	nop
	}
	index++;if(index>3)index=0;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <TIM1_UP_IRQHandler+0x138>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <TIM1_UP_IRQHandler+0x138>)
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <TIM1_UP_IRQHandler+0x138>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d902      	bls.n	8000606 <TIM1_UP_IRQHandler+0x126>
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <TIM1_UP_IRQHandler+0x138>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
	TIM1->SR &= ~(1UL<<0U);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <TIM1_UP_IRQHandler+0x150>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <TIM1_UP_IRQHandler+0x150>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6113      	str	r3, [r2, #16]
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000002c 	.word	0x2000002c
 800061c:	20000028 	.word	0x20000028
 8000620:	10624dd3 	.word	0x10624dd3
 8000624:	20000000 	.word	0x20000000
 8000628:	51eb851f 	.word	0x51eb851f
 800062c:	cccccccd 	.word	0xcccccccd
 8000630:	40012c00 	.word	0x40012c00

08000634 <delay>:

void delay(uint32_t time)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	while(time--);
 800063c:	bf00      	nop
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	1e5a      	subs	r2, r3, #1
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1fa      	bne.n	800063e <delay+0xa>
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
	...

08000654 <main>:

int main()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	TM_SystemInit();
 8000658:	f7ff fe00 	bl	800025c <TM_SystemInit>
	TM_GPIO_Init();
 800065c:	f7ff fe50 	bl	8000300 <TM_GPIO_Init>
	TM_EXTI_Init();
 8000660:	f7ff fea8 	bl	80003b4 <TM_EXTI_Init>
	TM_TIM_Init();
 8000664:	f7ff feca 	bl	80003fc <TM_TIM_Init>
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <main+0x6c>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <main+0x6c>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6193      	str	r3, [r2, #24]
	AFIO->MAPR = AFIO_MAPR_SWJ_CFG_1;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0x70>)
 8000676:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800067a:	605a      	str	r2, [r3, #4]
	while(1)
	{
		GPIOC->BSRR |= 3UL<<0U;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <main+0x74>)
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <main+0x74>)
 8000682:	f043 0303 	orr.w	r3, r3, #3
 8000686:	6113      	str	r3, [r2, #16]
		delay(720000);
 8000688:	4810      	ldr	r0, [pc, #64]	; (80006cc <main+0x78>)
 800068a:	f7ff ffd3 	bl	8000634 <delay>
		GPIOC->BRR |= 3UL<<0U;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <main+0x74>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <main+0x74>)
 8000694:	f043 0303 	orr.w	r3, r3, #3
 8000698:	6153      	str	r3, [r2, #20]
		delay(720000);
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <main+0x78>)
 800069c:	f7ff ffca 	bl	8000634 <delay>
		num++; if(num>9999)num=0;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <main+0x7c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <main+0x7c>)
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <main+0x7c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d9e2      	bls.n	800067c <main+0x28>
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <main+0x7c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
		GPIOC->BSRR |= 3UL<<0U;
 80006bc:	e7de      	b.n	800067c <main+0x28>
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010000 	.word	0x40010000
 80006c8:	40011000 	.word	0x40011000
 80006cc:	000afc80 	.word	0x000afc80
 80006d0:	20000028 	.word	0x20000028

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <HardFault_Handler+0x4>

080006e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <MemManage_Handler+0x4>

080006ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <BusFault_Handler+0x4>

080006f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <UsageFault_Handler+0x4>

080006f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000720:	f000 f85c 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <SystemInit+0x5c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <SystemInit+0x5c>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <SystemInit+0x5c>)
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	4911      	ldr	r1, [pc, #68]	; (8000784 <SystemInit+0x5c>)
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x60>)
 8000740:	4013      	ands	r3, r2
 8000742:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <SystemInit+0x5c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <SystemInit+0x5c>)
 800074a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800074e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <SystemInit+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SystemInit+0x5c>)
 800075a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <SystemInit+0x5c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <SystemInit+0x5c>)
 8000766:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800076a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SystemInit+0x5c>)
 800076e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000772:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SystemInit+0x64>)
 8000776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800077a:	609a      	str	r2, [r3, #8]
#endif 
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000
 8000788:	f8ff0000 	.word	0xf8ff0000
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000790:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000792:	e003      	b.n	800079c <LoopCopyDataInit>

08000794 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000796:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000798:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800079a:	3104      	adds	r1, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007a4:	d3f6      	bcc.n	8000794 <CopyDataInit>
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007a8:	e002      	b.n	80007b0 <LoopFillZerobss>

080007aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007ac:	f842 3b04 	str.w	r3, [r2], #4

080007b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007b4:	d3f9      	bcc.n	80007aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b6:	f7ff ffb7 	bl	8000728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ba:	f000 f821 	bl	8000800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007be:	f7ff ff49 	bl	8000654 <main>
  bx lr
 80007c2:	4770      	bx	lr
  ldr r3, =_sidata
 80007c4:	08000868 	.word	0x08000868
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007d0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007d4:	20000034 	.word	0x20000034

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>
	...

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	2000000b 	.word	0x2000000b
 80007fc:	20000030 	.word	0x20000030

08000800 <__libc_init_array>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	2500      	movs	r5, #0
 8000804:	4e0c      	ldr	r6, [pc, #48]	; (8000838 <__libc_init_array+0x38>)
 8000806:	4c0d      	ldr	r4, [pc, #52]	; (800083c <__libc_init_array+0x3c>)
 8000808:	1ba4      	subs	r4, r4, r6
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	42a5      	cmp	r5, r4
 800080e:	d109      	bne.n	8000824 <__libc_init_array+0x24>
 8000810:	f000 f81a 	bl	8000848 <_init>
 8000814:	2500      	movs	r5, #0
 8000816:	4e0a      	ldr	r6, [pc, #40]	; (8000840 <__libc_init_array+0x40>)
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <__libc_init_array+0x44>)
 800081a:	1ba4      	subs	r4, r4, r6
 800081c:	10a4      	asrs	r4, r4, #2
 800081e:	42a5      	cmp	r5, r4
 8000820:	d105      	bne.n	800082e <__libc_init_array+0x2e>
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000828:	4798      	blx	r3
 800082a:	3501      	adds	r5, #1
 800082c:	e7ee      	b.n	800080c <__libc_init_array+0xc>
 800082e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000832:	4798      	blx	r3
 8000834:	3501      	adds	r5, #1
 8000836:	e7f2      	b.n	800081e <__libc_init_array+0x1e>
 8000838:	08000860 	.word	0x08000860
 800083c:	08000860 	.word	0x08000860
 8000840:	08000860 	.word	0x08000860
 8000844:	08000864 	.word	0x08000864

08000848 <_init>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	bf00      	nop
 800084c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084e:	bc08      	pop	{r3}
 8000850:	469e      	mov	lr, r3
 8000852:	4770      	bx	lr

08000854 <_fini>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	bf00      	nop
 8000858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085a:	bc08      	pop	{r3}
 800085c:	469e      	mov	lr, r3
 800085e:	4770      	bx	lr
